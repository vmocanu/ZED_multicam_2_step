///////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2025, STEREOLABS.
//
// All rights reserved.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////

// ZED include
#include "ClientPublisher.hpp"
#include "CaptureRecorder.hpp"
#include "GLViewer.hpp"
#include "utils.hpp"
#include <signal.h>
#include <chrono>
#include <thread>
#include <cstdlib>
#include <sys/stat.h>
#include <memory>

#define BUILD_MESH 1

// Application modes
enum class AppMode {
    CAPTURE,     // Record SVO files from each camera
    FUSION,      // Perform fusion on recorded SVO files
    LIVE_FUSION  // Original mode: live capture + fusion
};

void print_usage() {
    std::cout << "ZED Spatial Mapping Fusion Application" << std::endl;
    std::cout << "Usage: ./ZED_SpatialMappingFusion <mode> <config_file> [options]" << std::endl;
    std::cout << std::endl;
    std::cout << "Modes:" << std::endl;
    std::cout << "  capture    Record SVO files from each camera" << std::endl;
    std::cout << "  fusion     Perform fusion on recorded SVO files" << std::endl;
    std::cout << "  live       Live capture + fusion (original mode)" << std::endl;
    std::cout << std::endl;
    std::cout << "Arguments:" << std::endl;
    std::cout << "  config_file    JSON configuration file (generated by ZED360)" << std::endl;
    std::cout << std::endl;
    std::cout << "Capture Mode Options:" << std::endl;
    std::cout << "  --duration <seconds>    Recording duration (default: 30)" << std::endl;
    std::cout << "  --output-dir <path>     Output directory for SVO files (default: ./svo_recordings)" << std::endl;
    std::cout << std::endl;
    std::cout << "Examples:" << std::endl;
    std::cout << "  ./ZED_SpatialMappingFusion capture config.json --duration 60" << std::endl;
    std::cout << "  ./ZED_SpatialMappingFusion fusion config.json" << std::endl;
    std::cout << "  ./ZED_SpatialMappingFusion live config.json" << std::endl;
}

AppMode parse_mode(const std::string& mode_str) {
    if (mode_str == "capture") return AppMode::CAPTURE;
    if (mode_str == "fusion") return AppMode::FUSION;
    if (mode_str == "live") return AppMode::LIVE_FUSION;
    return AppMode::LIVE_FUSION; // default
}

// Global flag for signal handling
volatile bool exit_requested = false;

void signal_handler(int signal) {
    std::cout << std::endl << "Received signal " << signal << ". Stopping gracefully..." << std::endl;
    exit_requested = true;
}

// Capture mode implementation
int run_capture_mode(const std::vector<sl::FusionConfiguration>& configurations, 
                     int recording_duration, const std::string& output_dir) {
    
    std::cout << "=== CAPTURE MODE ===" << std::endl;
    std::cout << "Recording duration: " << recording_duration << " seconds" << std::endl;
    std::cout << "Output directory: " << output_dir << std::endl;
    std::cout << "Number of cameras: " << configurations.size() << std::endl;
    std::cout << std::endl;

    // Create output directory (simple approach for C++14 compatibility)
    std::string mkdir_cmd = "mkdir -p " + output_dir;
    system(mkdir_cmd.c_str());
    
    // Setup signal handling for graceful shutdown
    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);
    
    // Create recorders for each camera using unique_ptr to avoid move/copy issues
    std::vector<std::unique_ptr<CaptureRecorder>> recorders;
    std::vector<std::string> svo_paths;
    
    for (size_t i = 0; i < configurations.size(); ++i) {
        recorders.push_back(std::make_unique<CaptureRecorder>()); // Use default HD1080 settings
        
        // Generate SVO filename based on serial number
        std::string svo_filename = "camera_" + std::to_string(configurations[i].serial_number) + ".svo";
        std::string svo_path = output_dir + "/" + svo_filename;
        svo_paths.push_back(svo_path);
    }
    
    // Start recording on all cameras
    int active_recordings = 0;
    for (size_t i = 0; i < configurations.size(); ++i) {
        const auto& conf = configurations[i];
        
        // Only start recording for cameras that should run locally
        if (conf.communication_parameters.getType() == sl::CommunicationParameters::COMM_TYPE::INTRA_PROCESS) {
            std::cout << "Starting recording for camera " << conf.serial_number << "..." << std::flush;
            
            if (recorders[i]->startRecording(conf.input_type, svo_paths[i], conf.serial_number)) {
                active_recordings++;
                std::cout << " OK" << std::endl;
            } else {
                std::cout << " FAILED" << std::endl;
            }
        }
    }
    
    if (active_recordings == 0) {
        std::cout << "No cameras started recording. Exiting." << std::endl;
        return EXIT_FAILURE;
    }
    
    std::cout << std::endl << "Recording started on " << active_recordings << " camera(s)." << std::endl;
    std::cout << "Press Ctrl+C to stop recording early." << std::endl;
    std::cout << std::endl;
    
    // Wait for recording duration or user interruption
    auto start_time = std::chrono::steady_clock::now();
    while (!exit_requested) {
        std::this_thread::sleep_for(std::chrono::seconds(1));
        
        auto elapsed = std::chrono::duration_cast<std::chrono::seconds>(
            std::chrono::steady_clock::now() - start_time).count();
            
        if (elapsed >= recording_duration) {
            std::cout << "Recording duration reached. Stopping..." << std::endl;
            break;
        }
        
        // Print progress every 10 seconds
        if (elapsed % 10 == 0 && elapsed > 0) {
            std::cout << "Recording progress: " << elapsed << "/" << recording_duration << " seconds" << std::endl;
        }
    }
    
    // Stop all recordings
    std::cout << "Stopping recordings..." << std::endl;
    for (auto& recorder : recorders) {
        if (recorder->isRecording()) {
            recorder->stopRecording();
        }
    }
    
    // Print summary
    std::cout << std::endl << "=== RECORDING SUMMARY ===" << std::endl;
    for (size_t i = 0; i < configurations.size(); ++i) {
        // Check if file exists using stat (C++14 compatible)
        struct stat buffer;
        if (stat(svo_paths[i].c_str(), &buffer) == 0) {
            long file_size = buffer.st_size;
            std::cout << "Camera " << configurations[i].serial_number << ": " 
                      << svo_paths[i] << " (" << (file_size / 1024 / 1024) << " MB)" << std::endl;
        }
    }
    
    std::cout << std::endl << "Capture completed successfully!" << std::endl;
    std::cout << "To run fusion on recorded data, use:" << std::endl;
    std::cout << "./ZED_SpatialMappingFusion fusion <config_file>" << std::endl;
    
    return EXIT_SUCCESS;
}

// Fusion mode implementation (original logic)
int run_fusion_mode(const std::vector<sl::FusionConfiguration>& configurations, 
                    const sl::COORDINATE_SYSTEM& COORDINATE_SYSTEM, 
                    const sl::UNIT& UNIT, 
                    int argc, char **argv) {
    
    std::cout << "=== FUSION MODE ===" << std::endl;
    std::cout << "Number of cameras/SVO files: " << configurations.size() << std::endl;
    std::cout << std::endl;

    // Check if the ZED camera should run within the same process or if they are running on the edge.
    // Note: Camera parameters (HD1080, 30fps, NEURAL_PLUS) are set in ClientPublisher constructor
    std::vector<ClientPublisher> clients(configurations.size());
    int id_ = 0;
    std::map<int, std::string> svo_files;
    for (auto conf: configurations) {
        // if the ZED camera should run locally, then start a thread to handle it
        if(conf.communication_parameters.getType() == sl::CommunicationParameters::COMM_TYPE::INTRA_PROCESS){
            std::cout << "Try to open ZED " <<conf.serial_number << ".." << std::flush;
            auto state = clients[id_].open(conf.input_type);

            if (!state) {
                std::cerr << "Could not open ZED: " << conf.input_type.getConfiguration() << ". Skipping..." << std::endl;
                continue;
            }

            if (conf.input_type.getType() == sl::InputType::INPUT_TYPE::SVO_FILE)
                svo_files.insert(std::make_pair(id_, conf.input_type.getConfiguration()));

            std::cout << ". ready !" << std::endl;

            id_++;
        }
    }

    // Synchronize SVO files in SVO mode
    bool enable_svo_sync = (svo_files.size() > 1);
    if (enable_svo_sync) {
        std::cout << "Starting SVO sync process..." << std::endl;
        std::map<int, int> cam_idx_to_svo_frame_idx = syncDATA(svo_files);

        for (auto &it : cam_idx_to_svo_frame_idx) {
            std::cout << "Setting camera " << it.first << " to frame " << it.second << std::endl;
            clients[it.first].setStartSVOPosition(it.second);
        }
    }

    // start camera threads
    for (auto &it: clients)
        it.start();

    // Now that the ZED camera are running, we need to initialize the fusion module
    sl::InitFusionParameters init_params;
    // Note: InitFusionParameters doesn't have camera-specific settings
    // Camera settings are configured individually in ClientPublisher
    init_params.coordinate_units = UNIT;
    init_params.coordinate_system = COORDINATE_SYSTEM;
    init_params.verbose = true;

    // create and initialize it
    sl::Fusion fusion;
    auto state = fusion.init(init_params);
    if(state != sl::FUSION_ERROR_CODE::SUCCESS){
        std::cout<<"ERROR Init "<<state<<std::endl;
        return 1;
    }

    // subscribe to every cameras of the setup to internally gather their data
    std::vector<sl::CameraIdentifier> cameras;
    for (auto& it : configurations) {
        sl::CameraIdentifier uuid(it.serial_number);
        // to subscribe to a camera you must give its serial number, the way to communicate with it (shared memory or local network), and its world pose in the setup.        
        auto state = fusion.subscribe(uuid, it.communication_parameters, it.pose, it.override_gravity);
        if (state != sl::FUSION_ERROR_CODE::SUCCESS)
            std::cout << "Unable to subscribe to " << std::to_string(uuid.sn) << " . " << state << std::endl;
        else
            cameras.push_back(uuid);
    }

    // check that at least one camera is connected
    if (cameras.empty()) {
        std::cout << "no connections " << std::endl;
        return EXIT_FAILURE;
    }

    sl::PositionalTrackingFusionParameters positional_tracking_param;
    state = fusion.enablePositionalTracking(positional_tracking_param);
    if(state != sl::FUSION_ERROR_CODE::SUCCESS){
        std::cout<<"ERROR PositionalTracking "<<state<<std::endl;
        return 1;
    }

    // creation of a 3D viewer
    GLViewer viewer;
    viewer.init(argc, argv);

    sl::SpatialMappingFusionParameters spatial_mapping_parameters;
#if BUILD_MESH
    spatial_mapping_parameters.map_type = sl::SpatialMappingParameters::SPATIAL_MAP_TYPE::MESH;
    sl::Mesh map;
#else
    spatial_mapping_parameters.map_type = sl::SpatialMappingParameters::SPATIAL_MAP_TYPE::FUSED_POINT_CLOUD;
    sl::FusedPointCloud map;
#endif

    // Set mapping range, it will set the resolution accordingly (a higher range, a lower resolution)
    spatial_mapping_parameters.set(sl::SpatialMappingParameters::MAPPING_RANGE::SHORT);
    spatial_mapping_parameters.set(sl::SpatialMappingParameters::MAPPING_RESOLUTION::HIGH);
    // Request partial updates only (only the last updated chunks need to be re-draw)
    spatial_mapping_parameters.use_chunk_only = true;
    // Stability counter defines how many times a stable 3D points should be seen before it is integrated into the spatial mapping
    spatial_mapping_parameters.stability_counter = 4;

    state = fusion.enableSpatialMapping(spatial_mapping_parameters);
    if(state != sl::FUSION_ERROR_CODE::SUCCESS){
        std::cout<<"ERROR Spatial Mapping "<<state<<std::endl;
        return 1;
    }

    sl::Timestamp last_update = 0;
    bool wait_for_mesh = false;    

    auto ts = sl::getCurrentTimeStamp();
    // run the fusion as long as the viewer is available.
    while (viewer.isAvailable()) {
        // run the fusion process (which gather data from all camera, sync them and process them)
        
        if (fusion.process() == sl::FUSION_ERROR_CODE::SUCCESS) {

            std::cout<<"New frame at TS: "<<(sl::getCurrentTimeStamp().getMilliseconds()-ts.getMilliseconds())<<std::endl;
            ts = sl::getCurrentTimeStamp();
            if(!wait_for_mesh && (ts.getMilliseconds() - last_update.getMilliseconds() > 100 )){
                fusion.requestSpatialMapAsync();
                wait_for_mesh =true;
            }

            if(wait_for_mesh && fusion.getSpatialMapRequestStatusAsync() == sl::FUSION_ERROR_CODE::SUCCESS){
                fusion.retrieveSpatialMapAsync(map);
                // update the 3D view
                viewer.updateMap(map);
                wait_for_mesh = false;
                last_update = ts;
            }
        }
    }

    viewer.exit();

    map.save("MyMap.ply", sl::MESH_FILE_FORMAT::PLY);

    for (auto &it: clients)
        it.stop();

    fusion.close();

    return EXIT_SUCCESS;
}

// Helper function to create SVO-based configuration
std::vector<sl::FusionConfiguration> create_svo_configurations(
    const std::vector<sl::FusionConfiguration>& original_configs, 
    const std::string& svo_directory) {
    
    std::vector<sl::FusionConfiguration> svo_configs;
    
    for (const auto& config : original_configs) {
        sl::FusionConfiguration svo_config = config;
        
        // Create SVO file path
        std::string svo_filename = "camera_" + std::to_string(config.serial_number) + ".svo";
        std::string svo_path = svo_directory + "/" + svo_filename;
        
        // Check if SVO file exists using stat (C++14 compatible)
        struct stat buffer;
        if (stat(svo_path.c_str(), &buffer) == 0) {
            svo_config.input_type.setFromSVOFile(sl::String(svo_path.c_str()));
            svo_configs.push_back(svo_config);
            std::cout << "Found SVO file for camera " << config.serial_number << ": " << svo_path << std::endl;
        } else {
            std::cout << "Warning: SVO file not found for camera " << config.serial_number << ": " << svo_path << std::endl;
        }
    }
    
    return svo_configs;
}

int main(int argc, char **argv) {
    if (argc < 3) {
        print_usage();
        return 1;
    }
    
    // Parse command line arguments
    AppMode app_mode = parse_mode(argv[1]);
    std::string json_config(argv[2]);
    
    // Parse optional arguments
    int recording_duration = 30;  // seconds
    std::string output_dir = "./svo_recordings";
    
    for (int i = 3; i < argc; i++) {
        std::string arg(argv[i]);
        if (arg == "--duration" && i + 1 < argc) {
            recording_duration = std::atoi(argv[++i]);
        } else if (arg == "--output-dir" && i + 1 < argc) {
            output_dir = std::string(argv[++i]);
        }
    }

    // Defines the Coordinate system and unit used in this sample
    constexpr sl::COORDINATE_SYSTEM COORDINATE_SYSTEM = sl::COORDINATE_SYSTEM::RIGHT_HANDED_Y_UP;
    constexpr sl::UNIT UNIT = sl::UNIT::METER;

    // Read json file containing the configuration of your multicamera setup.    
    auto configurations = sl::readFusionConfigurationFile(json_config, COORDINATE_SYSTEM, UNIT);

    if (configurations.empty()) {
        std::cout << "Empty configuration File." << std::endl;
        return EXIT_FAILURE;
    }
    
    // Execute the appropriate mode
    switch (app_mode) {
        case AppMode::CAPTURE:
            return run_capture_mode(configurations, recording_duration, output_dir);
            
        case AppMode::FUSION: {
            // For fusion mode, use SVO files from the svo_recordings directory
            auto svo_configs = create_svo_configurations(configurations, "./svo_recordings");
            if (svo_configs.empty()) {
                std::cout << "No SVO files found in ./svo_recordings/" << std::endl;
                std::cout << "Run capture mode first to record SVO files." << std::endl;
                return EXIT_FAILURE;
            }
            return run_fusion_mode(svo_configs, COORDINATE_SYSTEM, UNIT, argc, argv);
        }
        
        case AppMode::LIVE_FUSION:
            return run_fusion_mode(configurations, COORDINATE_SYSTEM, UNIT, argc, argv);
            
        default:
            std::cout << "Unknown application mode" << std::endl;
            return EXIT_FAILURE;
    }
}
